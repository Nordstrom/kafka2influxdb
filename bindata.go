// Code generated by go-bindata.
// sources:
// kafka2influxdb.service
// kafka2influxdb.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdbService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\xaa\xe2\x40\x10\x85\xf7\xfd\x14\xbe\x80\x36\x0c\xcc\x2c\x06\x7a\x21\x63\x74\x64\x30\x88\x89\x30\x20\x22\x6d\xa7\x92\x14\xf6\x1f\x5d\xd5\x5e\x7d\xfb\x4b\xbc\xba\x89\x8b\xbb\xea\x3e\x5f\x9d\x53\x05\xe7\xb0\xf7\xc8\x47\xb1\x00\x32\x09\x23\x63\xf0\xea\xa2\xdb\x8b\xfe\x81\xbe\xb5\xf9\xd6\x9c\xc5\x22\x98\xec\xc0\xb3\x7e\x0c\x7b\xe6\x48\xbf\xa5\xec\x90\xfb\x7c\x9e\x99\xe0\x24\x31\xc4\x5e\x7b\x98\x3a\x9d\x18\xbd\x1c\xe5\xff\x04\xdf\xe0\x90\xdd\x6a\xee\x8b\x1b\x12\x93\x92\xc0\x66\xe4\x1b\xc9\x19\x07\x67\x85\x38\x54\x90\xae\x68\xe0\x28\xea\x7b\x04\x45\xe8\xa2\x05\xb1\x27\x48\xea\x34\xba\xb3\x4a\x21\xc7\x37\xba\x4d\x78\xd5\x0c\x0b\x18\xb6\x90\xba\x03\xbd\x50\xed\xe2\x53\x06\x06\xc3\xd5\x9d\x18\x9c\x6a\xb3\xb5\x2f\xf4\x37\x38\x50\x9c\x32\x88\x32\x94\xf0\x31\xe4\xd0\x42\x07\xf4\x05\x77\x40\x9c\xd0\xf0\xbc\x69\x12\x10\x2d\xb5\x43\x8b\x40\x6a\xbe\x3c\xad\xcb\xa2\x9e\x3c\xdf\x5f\xc3\x67\x5f\xae\xff\x8b\xe2\x06\xa6\x62\x9d\x58\xc9\x4c\x49\xda\x60\xb4\x95\xe7\xb7\xc6\x26\x34\x78\x26\xd3\xa9\x0d\x5d\x8b\x16\x94\xbc\xea\xc1\xdd\x7d\xd3\x98\x0d\x9d\xf8\x87\xd6\x6e\x42\x03\x2a\xa6\x60\x80\xe8\x01\x2a\xec\xbc\xb6\xaa\x5a\xaf\xea\x62\xb7\x11\x35\x3a\x08\x99\x2b\x30\xea\xa7\x10\xe2\x33\x00\x00\xff\xff\xc8\x09\x3a\x9f\x02\x02\x00\x00")

func homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdbServiceBytes() ([]byte, error) {
	return bindataRead(
		_homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdbService,
		"home/stef/kafka2influx_gopath/src/github.com/stephane-martin/kafka2influxdb/kafka2influxdb.service",
	)
}

func homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdbService() (*asset, error) {
	bytes, err := homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdbServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home/stef/kafka2influx_gopath/src/github.com/stephane-martin/kafka2influxdb/kafka2influxdb.service", size: 514, mode: os.FileMode(436), modTime: time.Unix(1490654986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdb1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x8e\xda\x3a\x18\xdd\xfb\x29\x3e\x65\x75\xaf\x74\xe3\x19\x66\x71\xaf\x74\xa5\x2e\x18\x60\x0a\x2d\x90\x88\x50\x55\x15\x61\x61\x12\x87\x58\xe3\xd8\xc8\xfe\xd2\x19\x1e\xa9\xcf\xd1\x17\xab\xec\xf0\x97\x99\x30\x6a\x47\x62\x61\x8e\xcf\x39\x9f\x39\x3e\x86\xa6\x01\xf4\x6b\xd4\x15\x43\x91\x31\x29\xf7\xb0\xe5\x8a\x1b\x86\x3c\x87\xcd\x1e\x62\xa6\x72\x9d\x41\x8f\xf6\xfe\xa5\xb7\xf4\x8e\xd0\x34\x20\x74\x39\x86\xe0\x91\x15\x8f\xec\x4e\xa8\x42\xd6\xcf\xf9\x26\x80\xa0\x17\x40\x30\x63\x26\x2b\xe1\xee\xb6\xf7\x5f\x00\x81\xfb\x10\x5a\xee\x09\x4d\xc6\x30\xef\xcf\x46\x84\xc6\x31\x69\xeb\x20\x5d\x71\xb5\x86\x5d\x2d\x25\x54\x1c\x8d\xc8\x2c\x58\xd4\x86\xe7\x20\x14\x7c\x76\x5c\x40\xbd\x73\x30\x53\x39\xec\x6a\x5b\x02\x96\xbc\x22\xa8\x61\xe2\x3d\x86\xf7\xde\x3f\xf9\x36\x8f\xe2\x64\x92\xf8\x19\x69\xb1\xba\x5f\xb7\x07\xa5\xc5\x6a\x0d\x1e\x4f\xc3\x34\x2c\xb9\xdc\x39\x84\xd0\x78\x08\xb7\x84\xc6\x6e\xf1\xb6\x2c\x2b\x79\xf6\x98\x86\xcd\x61\xfe\x50\x9b\xf3\x82\xd5\x12\xd3\x30\xd3\xaa\x10\xdb\xf7\x4d\x7e\x97\x76\x27\xd4\x36\x0d\x2f\xf1\xdf\x13\xaf\x4e\x51\x9d\xc7\x7e\xf0\xd8\x20\x9a\x3f\x4c\x3e\x3e\x4c\xa6\x23\x87\xad\xc9\x99\x69\xf7\x56\x6a\xcf\xbc\xd4\x4b\xbd\x2d\x84\xe4\x67\x83\x69\x74\xa1\xf6\x88\x45\x66\xb0\x39\x5b\x32\x86\xe1\x28\x19\x2c\x26\xf1\x72\x12\xcd\xdf\xba\xcc\xff\x9b\xcd\x10\x32\xad\x14\xcf\xd0\x02\x6a\x60\x87\xca\x64\xb2\xb6\xc8\xcd\x8b\xdf\x1a\x82\xe5\xd2\x53\xad\xae\xf8\xa1\x57\xaf\x38\xae\x8b\xf6\x54\xc6\xc2\xe8\xca\x35\xee\x2a\x9b\x19\xcb\xad\x67\x1c\x25\xcc\xc2\xa7\x24\x9a\x83\x36\xa7\x8a\xc2\x54\x28\x0e\xb1\xd1\xa8\x33\x2d\x5f\x99\x3c\x19\x81\x2f\x4c\x2e\xfa\xed\x0c\x37\x0c\xb3\x92\x5b\x1f\xd0\x20\x9a\xcd\xfa\xf3\x61\x42\xe8\x32\x26\xf4\xfe\x5a\x3d\xa7\xc2\xa2\xb7\x6c\xbd\x22\x2c\x19\xc2\x93\x90\x12\x36\xfc\x10\x07\xcf\xa1\xd0\xc6\xe5\x68\xeb\x4a\xa8\x2d\xa1\x8b\x84\xd0\xc5\xa8\xe5\xdf\x55\xe1\xd8\x08\xd5\x8c\x38\xec\x42\xb3\x59\x1b\x86\x42\xab\x4e\x9f\xd7\x65\x1e\x38\xc4\xbb\xb4\xd4\x60\xf7\x0a\xd9\x73\xa7\x49\x47\xab\x8f\x2e\x0c\xcf\xb9\x09\x0b\xec\x3b\x13\x92\x6d\x24\xef\xf4\x39\x17\x2f\x71\x2b\x17\x7a\xa1\xcd\x13\x33\xf9\xf1\x1e\xce\xb2\x64\x0c\x91\x2f\x65\x3b\xf7\x34\x2c\x9d\xc1\x3f\x1d\xff\x2d\x43\x61\x77\x92\xed\x81\x41\x61\x04\x57\xb9\xdc\x83\xdb\x83\x8a\x5b\xcb\xb6\x9c\x76\x1e\xa9\xfd\x90\xc8\x57\xd7\x0c\x90\x7a\x7b\x54\xf9\x66\x34\x04\xf8\xeb\x84\xf9\x0b\x65\xd2\x6a\x77\xab\xae\x4d\xc8\x95\x27\x62\xae\x6b\xfc\xfb\xea\xa4\xb7\x1e\xe7\x95\xd9\x07\x06\x08\x65\x91\xb3\x1c\x74\x71\x98\xd2\x8a\xca\x51\x2e\x83\x9a\xac\x6f\x38\x66\x37\xed\x67\xfc\xe2\x2b\x45\x5d\xc9\xe6\x32\x5b\x45\x70\x27\x6c\x99\xf7\xbf\x2c\xc7\xd1\x22\x21\x09\xfe\xfc\xb1\x2b\x99\xe2\x30\x63\x06\x85\xa2\xe4\x57\x00\x00\x00\xff\xff\xc3\xd8\x19\xb8\xcd\x06\x00\x00")

func homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdb1Bytes() ([]byte, error) {
	return bindataRead(
		_homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdb1,
		"home/stef/kafka2influx_gopath/src/github.com/stephane-martin/kafka2influxdb/kafka2influxdb.1",
	)
}

func homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdb1() (*asset, error) {
	bytes, err := homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdb1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home/stef/kafka2influx_gopath/src/github.com/stephane-martin/kafka2influxdb/kafka2influxdb.1", size: 1741, mode: os.FileMode(436), modTime: time.Unix(1490735497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"home/stef/kafka2influx_gopath/src/github.com/stephane-martin/kafka2influxdb/kafka2influxdb.service": homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdbService,
	"home/stef/kafka2influx_gopath/src/github.com/stephane-martin/kafka2influxdb/kafka2influxdb.1": homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdb1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"home": &bintree{nil, map[string]*bintree{
		"stef": &bintree{nil, map[string]*bintree{
			"kafka2influx_gopath": &bintree{nil, map[string]*bintree{
				"src": &bintree{nil, map[string]*bintree{
					"github.com": &bintree{nil, map[string]*bintree{
						"stephane-martin": &bintree{nil, map[string]*bintree{
							"kafka2influxdb": &bintree{nil, map[string]*bintree{
								"kafka2influxdb.1": &bintree{homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdb1, map[string]*bintree{}},
								"kafka2influxdb.service": &bintree{homeStefKafka2influx_gopathSrcGithubComStephaneMartinKafka2influxdbKafka2influxdbService, map[string]*bintree{}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

