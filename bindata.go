// Code generated by go-bindata.
// sources:
// kafka2influxdb.service
// kafka2influxdb.upstart
// kafka2influxdb.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kafka2influxdbService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4f\x6f\x1a\x31\x10\xc5\xef\xfe\x14\x1c\x7a\x25\x6e\x7b\xe8\xa1\x92\x0f\x51\x31\x14\x95\xd0\x28\xbb\x54\x95\xa2\x28\x32\xde\x59\x18\x65\xfc\x47\x9e\xf1\x16\xbe\x7d\xb5\x90\x5c\x96\x93\x3d\x3f\xbf\xe7\x37\x7a\xcf\xbb\x88\xf2\xa2\x16\xc0\xbe\x60\x16\x4c\xd1\xbc\xb9\xfe\xcd\x7d\xc5\xd8\x53\x3d\x75\x7b\xb5\x48\xbe\x06\x88\xe2\x2e\x8f\x47\x91\xcc\xdf\xb5\x3e\xa0\x1c\xeb\xfe\xce\xa7\xa0\x59\x20\x1f\x5d\x84\x79\x70\x45\x30\xea\x89\xff\x47\x8a\x1d\x8e\xde\x47\x27\x47\x7b\x42\x16\x36\x1a\xc4\x4f\x74\x93\xf1\x4e\x52\x20\xa5\x9e\x1b\x28\x03\x7a\x78\x51\xed\x39\x83\x61\x0c\x99\x40\xd9\x38\x60\x49\x71\xdc\x6a\x89\x04\xd7\xef\x3a\xe8\x5d\x25\x99\xc6\xef\x18\x8a\x79\x9d\xc0\x55\x49\x35\xdf\xd0\xc7\x82\x83\x13\x58\xc0\x98\xc8\xe6\x0c\xfc\x81\xda\x90\xdf\xc7\x24\xe0\xa5\x39\xb3\x40\x30\x7d\x25\xfa\x40\x3f\x53\x00\x23\xa5\x82\xda\xa6\x2d\xfc\x1b\x7d\x48\x70\x00\xbe\xc2\x27\x60\x29\xe8\xe5\xbe\xeb\x0a\x30\x2f\x5d\x40\x42\x60\x73\xbf\x7c\x5d\x6f\x6d\x3b\x7b\x3f\xbf\x8d\x97\xdd\x76\xfd\x57\xd9\x13\xf8\x46\x5c\x11\xa3\x2b\x17\x4d\xc9\x3b\xd2\xfb\x9b\x76\x67\x3c\x6a\x66\xf3\x39\xa5\x43\x3f\x56\xf1\x69\xf3\x7b\xb5\x5c\x6f\xec\x15\x11\x0c\x40\x17\xb6\xb1\x7f\xec\x66\xa6\x7e\x21\xd1\x43\xea\xc0\xe4\x92\x3c\x30\x5f\x40\x83\x87\xe8\xc8\x34\xeb\x55\x6b\x9f\x1e\x54\x8b\x01\x52\x95\x06\xbc\xf9\xf2\x59\x29\xf5\x3f\x00\x00\xff\xff\xe8\x81\x0d\x18\x23\x02\x00\x00")

func kafka2influxdbServiceBytes() ([]byte, error) {
	return bindataRead(
		_kafka2influxdbService,
		"kafka2influxdb.service",
	)
}

func kafka2influxdbService() (*asset, error) {
	bytes, err := kafka2influxdbServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kafka2influxdb.service", size: 547, mode: os.FileMode(436), modTime: time.Unix(1490800694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kafka2influxdbUpstart = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x4a\x03\x31\x10\x86\xcf\x9d\xa7\x18\x8b\x07\x3d\xc4\x68\xd5\xa3\xc7\xb5\x14\x56\x04\x15\x2f\x22\x92\x26\xb3\x4b\xe8\x34\x59\x76\x26\xa5\xbe\xbd\xec\xae\x28\x2e\xe6\xf8\xfd\xe1\x9f\xf9\x26\x90\xf8\x3e\x76\x1a\x73\xc2\xe5\xce\x35\x3b\xb7\x8a\xa9\xe1\x72\x0c\xdb\x25\x80\xa8\xeb\x15\x73\xc2\xb3\x44\x6a\x02\x1d\xa2\x27\x53\x3a\xc0\x9f\xe7\x52\x40\xce\xde\xb1\x69\x22\x93\x7c\x8a\xd2\x5e\x66\x79\x5f\x12\xd3\x81\x18\xdf\x56\xd7\x37\xb7\xef\xe7\x20\x9a\xbb\xa1\xf5\x37\x38\x19\x13\x00\x9f\x93\x64\x26\xe4\xdc\x82\x90\x96\x18\xf0\xe3\xef\x56\x03\x6e\xff\xc1\xbb\xc8\x8c\x12\xdb\xe4\x18\x9f\x37\xeb\x97\xea\xe9\x61\x62\x1a\xf7\x94\x8b\xe2\xd5\x25\xc0\xe4\x0a\x8b\x0b\xb4\xa4\xde\x06\x6a\x5c\x61\xb5\xb3\xaa\x05\x1d\xc9\xa3\x2d\xd2\xdb\x51\xcd\x6e\x63\x9a\xfd\xc1\xe9\x32\xc6\x70\x6e\x07\xf1\xbb\xd3\xfa\x71\x7d\xbf\xa9\xab\x09\x8d\x56\x23\xab\xab\xd7\xaa\x06\x4a\x01\xbf\x67\xc3\x57\x00\x00\x00\xff\xff\xf6\x30\x3b\xd9\x72\x01\x00\x00")

func kafka2influxdbUpstartBytes() ([]byte, error) {
	return bindataRead(
		_kafka2influxdbUpstart,
		"kafka2influxdb.upstart",
	)
}

func kafka2influxdbUpstart() (*asset, error) {
	bytes, err := kafka2influxdbUpstartBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kafka2influxdb.upstart", size: 370, mode: os.FileMode(436), modTime: time.Unix(1490800687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kafka2influxdb1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4f\x6e\xeb\x36\x10\xc6\xf7\x3c\xc5\x40\xab\x16\xa8\xf9\xe2\x2c\x5a\xa0\x40\x17\x8e\xed\xd4\x6a\x6d\x4b\xb0\x5c\xb4\x85\xe5\x05\x2d\x51\x12\x11\x8a\x14\xc8\x51\x13\x1f\xa9\xe7\xe8\xc5\x0a\x52\xfe\x27\xc7\x7e\x68\x80\x06\xc8\x42\x19\x7e\xf3\x1b\x7a\x38\xdf\xd0\x34\x80\x51\x8b\xba\x66\x28\x32\x26\xe5\x1e\x4a\xae\xb8\x61\xc8\x73\xd8\xed\x21\x66\x2a\xd7\x19\x0c\xe9\xf0\x7b\xfa\x40\x1f\x09\x4d\x03\x42\xd7\x33\x08\x5e\x58\xf1\xc2\x1e\x85\x2a\x64\xfb\x96\xef\x02\x08\x86\x01\x04\x0b\x66\xb2\x0a\x1e\x1f\x86\x3f\x04\x10\xb8\x3f\x42\xab\x3d\xa1\xc9\x0c\x96\xa3\xc5\x94\xd0\x38\x26\xfd\x3c\x48\x37\x5c\x6d\xa1\x69\xa5\x84\x9a\xa3\x11\x99\x05\x8b\xda\xf0\x1c\x84\x82\x5f\x9d\x16\x50\x37\x2e\xcc\x54\x0e\x4d\x6b\x2b\xc0\x8a\xd7\x04\x35\x84\x9e\x31\x79\xf2\xfc\xe4\xcf\x65\x14\x27\x61\xe2\x6b\xa4\xc5\xe6\x69\xdb\x2f\x94\x16\x9b\x2d\x6c\xfc\x41\x3a\x48\x07\x99\x56\x85\x28\x5d\xf0\x27\x1f\x1b\x47\xcb\xe7\xf0\xe7\xe7\x70\x3e\x75\xb1\x6d\x47\xc8\x2a\x9e\xbd\xa4\x83\xae\xbe\x8b\x13\x1a\x4f\xe0\x81\xd0\xd8\x7d\xfc\xcf\x55\xce\xda\x4f\xa9\xd2\x08\x55\xa6\x83\x4b\xc2\xa7\x94\xb1\xc8\x0c\x5e\x25\xda\xbd\x95\xba\xec\x44\xe7\xa8\xd4\x65\x21\x24\x3f\xf3\xe6\xd1\x05\xec\x3f\xdd\xcd\xc7\x85\xb2\xc8\xa4\xf4\xbf\xe8\x4c\x6f\x0c\x2f\xc4\xdb\x19\x1e\xaf\xa6\xcf\xe1\x1f\x1f\x65\xe7\xbc\x60\xad\xc4\x8f\x3f\xce\xe9\x1e\x15\x97\x4d\x97\x96\xcc\x60\x32\x4d\xc6\xab\x30\x5e\x87\xd1\xf2\x6b\x63\xfa\x63\x77\x38\x80\x4c\x2b\xc5\x33\xb4\x80\x1a\xd8\xc1\x0c\x99\x6c\x2d\x72\x73\x75\x8d\x01\x58\x2e\xbd\xd4\xea\x9a\x1f\x1c\xf3\x4e\xe3\x5c\x66\x4f\x36\x2b\x8c\xae\x9d\x97\xee\xaa\x99\xb1\xdc\x7a\xc5\x31\x85\x59\xf8\x25\x89\x96\xa0\xcd\xc9\x7c\x30\x17\x8a\x43\x6c\x34\xea\x4c\xcb\x77\x90\x57\x23\xf0\x0a\x72\xe1\x5c\x07\xdc\x31\xcc\x2a\x6e\x7d\x83\xc6\xd1\x62\x31\x5a\x4e\x12\x42\xd7\x31\xa1\x4f\x70\xc7\x85\x73\x61\xd1\x23\x7b\xfb\x01\x2b\x86\xf0\x2a\xa4\x84\x1d\x3f\xb4\x83\xe7\x50\x68\xe3\xfa\x68\xdb\x5a\xa8\x92\xd0\x55\x42\xe8\x6a\xda\xe3\xdf\x7a\xe4\xd8\x08\xd5\x95\x38\x9c\x42\x77\xd8\x1a\x86\x42\xab\x9b\x9c\xf7\x3e\x1e\xbb\x88\xa7\xf4\xb2\xc1\xee\x15\xb2\xb7\x9b\x90\x1b\x36\x3d\x52\x18\x9e\xfb\x26\x2c\xb0\xbf\x98\x90\x6c\x27\xf9\x4d\xce\xc9\x87\x24\x71\x5f\xae\xe9\x85\x36\xaf\xcc\xe4\xc7\x77\x38\xa7\x25\x33\x88\xfc\x50\xf6\xfb\x9e\x0e\x2a\x07\xf8\xee\xc6\x30\x4f\x84\x6d\x24\xdb\x03\x83\xc2\x08\xae\x72\xb9\x07\x77\x06\x35\xb7\x96\x95\x9c\xde\xbc\x52\x7f\x15\x90\xdf\xdd\x64\x80\xd4\xe5\x31\xcb\x4f\x46\x27\x80\x6f\x4e\x31\xff\xa0\x4c\x5a\xed\x5e\xd5\x4d\x13\x72\xe5\x85\x98\xeb\x16\xbf\xbd\x5b\xe9\x6b\xeb\xe5\x4e\xed\x83\x02\xdc\x46\xe1\x2c\x07\x5d\x1c\xaa\xf4\x5a\xe5\x24\x97\x8d\x0a\xb7\x5f\x38\x66\x5f\xfa\x36\xbe\xfa\x97\xa2\xae\xbb\x0d\x35\xee\x0d\x82\xbb\x61\x0f\x3e\xfa\x6d\x3d\x8b\x56\x09\x49\xf0\x9f\xbf\x9b\x8a\x29\x0e\x0b\x66\x50\x28\x4a\xfe\x0d\x00\x00\xff\xff\xdf\xfa\xdf\x5d\xa7\x07\x00\x00")

func kafka2influxdb1Bytes() ([]byte, error) {
	return bindataRead(
		_kafka2influxdb1,
		"kafka2influxdb.1",
	)
}

func kafka2influxdb1() (*asset, error) {
	bytes, err := kafka2influxdb1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kafka2influxdb.1", size: 1959, mode: os.FileMode(436), modTime: time.Unix(1490800971, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kafka2influxdb.service": kafka2influxdbService,
	"kafka2influxdb.upstart": kafka2influxdbUpstart,
	"kafka2influxdb.1": kafka2influxdb1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"kafka2influxdb.1": &bintree{kafka2influxdb1, map[string]*bintree{}},
	"kafka2influxdb.service": &bintree{kafka2influxdbService, map[string]*bintree{}},
	"kafka2influxdb.upstart": &bintree{kafka2influxdbUpstart, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

