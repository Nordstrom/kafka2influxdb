// Code generated by go-bindata.
// sources:
// kafka2influxdb.service
// kafka2influxdb.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kafka2influxdbService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\xaa\xe2\x40\x10\x85\xf7\xfd\x14\xbe\x80\x36\x0c\xcc\x2c\x06\x7a\x21\x63\x74\x64\x30\x88\x89\x30\x20\x22\x6d\xa7\x92\x14\xf6\x1f\x5d\xd5\x5e\x7d\xfb\x4b\xbc\xba\x89\x8b\xbb\xea\x3e\x5f\x9d\x53\x05\xe7\xb0\xf7\xc8\x47\xb1\x00\x32\x09\x23\x63\xf0\xea\xa2\xdb\x8b\xfe\x81\xbe\xb5\xf9\xd6\x9c\xc5\x22\x98\xec\xc0\xb3\x7e\x0c\x7b\xe6\x48\xbf\xa5\xec\x90\xfb\x7c\x9e\x99\xe0\x24\x31\xc4\x5e\x7b\x98\x3a\x9d\x18\xbd\x1c\xe5\xff\x04\xdf\xe0\x90\xdd\x6a\xee\x8b\x1b\x12\x93\x92\xc0\x66\xe4\x1b\xc9\x19\x07\x67\x85\x38\x54\x90\xae\x68\xe0\x28\xea\x7b\x04\x45\xe8\xa2\x05\xb1\x27\x48\xea\x34\xba\xb3\x4a\x21\xc7\x37\xba\x4d\x78\xd5\x0c\x0b\x18\xb6\x90\xba\x03\xbd\x50\xed\xe2\x53\x06\x06\xc3\xd5\x9d\x18\x9c\x6a\xb3\xb5\x2f\xf4\x37\x38\x50\x9c\x32\x88\x32\x94\xf0\x31\xe4\xd0\x42\x07\xf4\x05\x77\x40\x9c\xd0\xf0\xbc\x69\x12\x10\x2d\xb5\x43\x8b\x40\x6a\xbe\x3c\xad\xcb\xa2\x9e\x3c\xdf\x5f\xc3\x67\x5f\xae\xff\x8b\xe2\x06\xa6\x62\x9d\x58\xc9\x4c\x49\xda\x60\xb4\x95\xe7\xb7\xc6\x26\x34\x78\x26\xd3\xa9\x0d\x5d\x8b\x16\x94\xbc\xea\xc1\xdd\x7d\xd3\x98\x0d\x9d\xf8\x87\xd6\x6e\x42\x03\x2a\xa6\x60\x80\xe8\x01\x2a\xec\xbc\xb6\xaa\x5a\xaf\xea\x62\xb7\x11\x35\x3a\x08\x99\x2b\x30\xea\xa7\x10\xe2\x33\x00\x00\xff\xff\xc8\x09\x3a\x9f\x02\x02\x00\x00")

func kafka2influxdbServiceBytes() ([]byte, error) {
	return bindataRead(
		_kafka2influxdbService,
		"kafka2influxdb.service",
	)
}

func kafka2influxdbService() (*asset, error) {
	bytes, err := kafka2influxdbServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kafka2influxdb.service", size: 514, mode: os.FileMode(436), modTime: time.Unix(1490654986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kafka2influxdb1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xdb\x3c\x10\xbc\xf3\x29\x16\x3a\x7d\x1f\xf0\x99\x89\x73\xf8\x0a\x14\xe8\xc1\xb1\x9d\xda\xad\x6d\x09\x96\x8b\xa2\xb0\x7c\xa0\x25\x4a\x22\x42\x91\x06\xb9\x6a\xe2\x47\xea\x73\xf4\xc5\x0a\x52\xfe\x93\x63\x07\x2d\xd0\x00\x39\x28\xcb\xd9\x99\xc5\xee\x8c\x69\x12\x40\xaf\x46\x5d\x31\x14\x29\x93\x72\x0b\x05\x57\xdc\x30\xe4\x19\xac\xb7\x10\x31\x95\xe9\x14\xba\xb4\xfb\x3f\xbd\xa5\x77\x84\x26\x01\xa1\x8b\x11\x04\x8f\x2c\x7f\x64\x77\x42\xe5\xb2\x7e\xce\xd6\x01\x04\xdd\x00\x82\x29\x33\x69\x09\x77\xb7\xdd\x77\x01\x04\xee\x8f\xd0\x72\x4b\x68\x3c\x82\x59\x6f\x3a\x24\x34\x8a\x48\xbb\x0f\x92\x25\x57\x2b\xd8\xd4\x52\x42\xc5\xd1\x88\xd4\x82\x45\x6d\x78\x06\x42\xc1\x67\x87\x05\xd4\x1b\x57\x66\x2a\x83\x4d\x6d\x4b\xc0\x92\x57\x04\x35\x8c\x3d\xc7\xe0\xde\xf3\xc7\xdf\x66\x61\x14\x8f\x63\xaf\x91\xe4\xcb\xfb\x55\x5b\x28\xc9\x97\x2b\x58\xfa\x87\xa4\x93\x74\x52\xad\x72\x51\xb8\xe2\x07\x5f\xeb\x87\xb3\x87\xf1\xc7\x87\xf1\x64\xe8\x6a\xab\x86\x21\x2d\x79\xfa\x98\x74\x1a\x7d\x57\x27\x34\x1a\xc0\x2d\xa1\x91\xfb\xf8\xcb\x2a\x47\xec\x9b\xa8\x6c\x84\x2a\x92\xce\x29\xc3\x9b\xc8\x58\x64\x06\xcf\x1a\xed\xd6\x4a\x5d\x34\xa0\x63\x55\xea\x22\x17\x92\x1f\xf9\x26\xe1\x09\xd9\x6f\xcd\xe6\xeb\x19\xcf\x59\x2d\xf1\xcf\x17\x78\x98\xa4\xe4\x72\xd3\xb4\xc5\x23\x18\x0c\xe3\xfe\x7c\x1c\x2d\xc6\xe1\xec\x35\x2b\xbd\x6f\x1e\x3b\x90\x6a\xa5\x78\x8a\x16\x50\x03\xdb\x19\x36\x95\xb5\x45\x6e\xce\xc6\xe8\x80\xe5\xd2\x43\xad\xae\xf8\xce\xd5\x2f\x30\x2e\x09\xf6\x10\x85\xdc\xe8\xca\xf9\xfd\x2a\x9a\x19\xcb\xad\x47\xec\x5b\x98\x85\x4f\x71\x38\x03\x6d\x0e\x01\x81\x89\x50\x1c\x22\xa3\x51\xa7\x5a\xbe\x20\x79\x32\x02\xcf\x48\x4e\xd2\xe5\x08\xd7\x0c\xd3\x92\x5b\xbf\xa0\x7e\x38\x9d\xf6\x66\x83\x98\xd0\x45\x44\xe8\x3d\x5c\x49\xca\x44\x58\xf4\x94\xad\x0c\x63\xc9\x10\x9e\x84\x94\xb0\xe6\xbb\x75\xf0\x0c\x72\x6d\xdc\x1e\x6d\x5d\x09\x55\x10\x3a\x8f\x09\x9d\x0f\x5b\xfc\x97\x8e\x1c\x19\xa1\x1a\x89\xdd\x2b\x34\x8f\xb5\x61\x28\xb4\xba\xc8\xf3\x32\x6b\x7d\x57\xf1\x2c\xad\x6e\xb0\x5b\x85\xec\xf9\x22\xc9\x85\x28\xed\x59\x18\x1e\xf7\x26\x2c\xb0\xef\x4c\x48\xb6\x96\xfc\x22\xcf\x21\x2b\x24\x76\x5f\x6e\xe9\xb9\x36\x4f\xcc\x64\xfb\x3b\x1c\xdb\xe2\x11\x84\xde\x94\xed\xbd\x27\x9d\xd2\x11\xfc\x77\xc1\xcc\x03\x61\x37\x92\x6d\x81\x41\x6e\x04\x57\x99\xdc\x82\x7b\x83\x8a\x5b\xcb\x0a\x4e\x2f\x8e\xd4\x8e\x2b\xf9\xea\x9c\x01\x52\x17\xfb\x2e\xef\x8c\x06\x00\xff\x1c\x6a\xfe\xa0\x4c\x5a\xed\xae\xea\xdc\x84\x5c\x79\x20\x66\xba\xc6\x7f\xaf\x2a\xbd\xf6\x13\x70\x45\x7b\x87\x00\xa1\x2c\x72\x96\x81\xce\x77\x2a\xad\x55\x39\xc8\xe9\xa2\xc6\xab\x1b\x8e\xe9\x4d\x3b\xc6\x67\xff\x52\xd4\x95\x6c\x8e\xd9\x32\x82\x9b\xb0\x45\xde\xfb\xb2\x18\x85\xf3\x98\xc4\xf8\xf3\xc7\xa6\x64\x8a\xc3\x94\x19\x14\x8a\x92\x5f\x01\x00\x00\xff\xff\xd1\x93\x43\xbd\x4b\x07\x00\x00")

func kafka2influxdb1Bytes() ([]byte, error) {
	return bindataRead(
		_kafka2influxdb1,
		"kafka2influxdb.1",
	)
}

func kafka2influxdb1() (*asset, error) {
	bytes, err := kafka2influxdb1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kafka2influxdb.1", size: 1867, mode: os.FileMode(436), modTime: time.Unix(1490792555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kafka2influxdb.service": kafka2influxdbService,
	"kafka2influxdb.1": kafka2influxdb1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"kafka2influxdb.1": &bintree{kafka2influxdb1, map[string]*bintree{}},
	"kafka2influxdb.service": &bintree{kafka2influxdbService, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

